---
description: "Rules for implementing Domain-Driven Design patterns and maintaining the domain model"
globs: "**/domain/**", "**/.cursor/rules/**"
alwaysApply: false
---

# Domain-Driven Design (DDD) Pattern Rules

> **TL;DR:** During the Design Phase, create or update domain model artifacts in the `/domain` directory and maintain the domain graph in `domainGraph.md`. Follow DDD principles including bounded contexts, entities, value objects, aggregates, and ubiquitous language. Document relationships and use Mermaid.js for visualizations.

## 🚨 DOMAIN MODEL VERIFICATION CHECKLIST

During any task that involves domain modeling, this checklist must be completed:

```
✅ DOMAIN MODEL VERIFICATION
- Domain directory exists? [YES/NO]
- All relevant bounded contexts defined? [YES/NO]
- Entities and value objects properly identified? [YES/NO]
- Aggregates and aggregate roots established? [YES/NO]
- Domain graph updated to reflect changes? [YES/NO]
- Ubiquitous language documented? [YES/NO]
- Relationships between domain objects mapped? [YES/NO]

→ If ANY [NO]: Domain modeling is INCOMPLETE and must be finished
```

## 📊 DOMAIN GRAPH REQUIREMENTS

The domain graph must be maintained using Mermaid.js diagrams and should include:

```mermaid
graph TD
    subgraph BoundedContext1["Bounded Context 1"]
        A1[Aggregate Root 1] --> E1[Entity 1]
        A1 --> V1[Value Object 1]
        E1 --> E2[Entity 2]
    end
    
    subgraph BoundedContext2["Bounded Context 2"]
        A2[Aggregate Root 2] --> E3[Entity 3]
        A2 --> V2[Value Object 2]
    end
    
    BoundedContext1 -- Relationship --> BoundedContext2

    classDef aggregateRoot fill:#ffcccc,stroke:#ff0000
    classDef entity fill:#ccffcc,stroke:#00ff00
    classDef valueObject fill:#ccccff,stroke:#0000ff
    
    class A1,A2 aggregateRoot
    class E1,E2,E3 entity
    class V1,V2 valueObject
```

## 📁 DOMAIN DIRECTORY STRUCTURE

When creating or updating domain models, ensure the following structure:

```
/domain/
  ├── README.md                # Overview of the domain model
  ├── glossary.md              # Ubiquitous language definitions
  ├── domainGraph.md           # Visual representation of the domain model
  │
  ├── /boundedContext1/        # First bounded context
  │   ├── README.md            # Context description and boundaries
  │   ├── entities.md          # Entity definitions
  │   ├── valueObjects.md      # Value object definitions
  │   ├── aggregates.md        # Aggregate definitions
  │   ├── repositories.md      # Repository interfaces
  │   ├── services.md          # Domain service definitions
  │   └── events.md            # Domain events
  │
  └── /boundedContext2/        # Second bounded context
      └── ...                  # Same structure as above
```

## 📝 DOMAIN ARTIFACT TEMPLATES

### Entity Template
```markdown
# Entity: [EntityName]

## Description
[Brief description of what this entity represents in the domain]

## Properties
- **Id**: [Type] - [Description]
- **Property1**: [Type] - [Description]
- **Property2**: [Type] - [Description]

## Lifecycle
[Description of the entity's lifecycle]

## Relationships
- Belongs to [AggregateName] aggregate
- References [OtherEntity]
- Contains [ValueObject]

## Invariants
- [Invariant 1]
- [Invariant 2]

## Business Rules
- [Rule 1]
- [Rule 2]
```

### Value Object Template
```markdown
# Value Object: [ValueObjectName]

## Description
[Brief description of what this value object represents]

## Properties
- **Property1**: [Type] - [Description]
- **Property2**: [Type] - [Description]

## Validation Rules
- [Validation Rule 1]
- [Validation Rule 2]

## Usage Context
[Where and how this value object is used]
```

### Bounded Context Template
```markdown
# Bounded Context: [ContextName]

## Description
[Description of this bounded context and its purpose]

## Ubiquitous Language
- **Term1**: [Definition]
- **Term2**: [Definition]

## Entities
- [Entity1]
- [Entity2]

## Value Objects
- [ValueObject1]
- [ValueObject2]

## Aggregates
- [Aggregate1]
- [Aggregate2]

## Context Mapping
- Relationship with [OtherContext1]: [Partnership/Customer-Supplier/etc.]
- Relationship with [OtherContext2]: [Partnership/Customer-Supplier/etc.]
```

## 🔄 DESIGN PHASE WORKFLOW FOR DOMAIN MODELING

During the Design Phase of any task that involves domain modeling:

1. **Domain Analysis**
   - Identify domain concepts from requirements
   - Define ubiquitous language terms
   - Determine bounded context boundaries

2. **Domain Structure Setup**
   - Create the domain directory if it doesn't exist
   - Set up bounded context subdirectories
   - Create or update the glossary.md

3. **Domain Model Creation/Update**
   - Define/update entities and value objects
   - Group related entities into aggregates
   - Define repositories and services
   - Document domain events

4. **Domain Graph Maintenance**
   - Create or update domainGraph.md
   - Use Mermaid.js for visual representation
   - Document relationships between domain objects
   - Color-code different types of domain objects

5. **Domain Model Verification**
   - Run the domain model verification checklist
   - Ensure all required artifacts are created/updated
   - Validate against DDD principles
   - Check for consistency with the ubiquitous language

## 🔍 COMMON DOMAIN MODELING ISSUES

1. **Anemic Domain Model**: Entities with getters/setters but no behavior
2. **Leaky Domain**: Infrastructure concerns bleeding into domain logic
3. **Missing Bounded Contexts**: Failing to identify separate contexts
4. **Ambiguous Ubiquitous Language**: Terms with unclear or conflicting meanings
5. **Inconsistent Aggregate Boundaries**: Poorly defined transaction boundaries
6. **Over-engineering**: Too many abstractions without clear business value
7. **Missing Domain Graph**: Failing to visually document the domain model
``` 