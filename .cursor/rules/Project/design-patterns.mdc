--
description: Applies general rules across all file types to maintain design patterns, and domain consistency.
globs: **/*.*
---

- APPROVED design patterns for writing code:
  - SOLID principles
  - Use Components
  - Use a Capabilities Model (Components have Capabilities)
  - DRY principle
  - YAGNI principle
  - KISS principle
  - TDD (Test Driven Development)(unit tests)
  - BDD (Behavior Driven Development)(acceptance tests in gherkin)
  - Reactive Programming
  - Functional Programming
  - Strategy
  - Strategy Pattern
  - Observer Pattern
  - Imperative Style: For low-level control over hardware or performance-critical code.
  - Functional Style: For data transformations using immutability and composable functions.
  - Trait-Oriented Design: A unique feature of Rust that enables polymorphism without inheritance by using traits for shared behavior across types
  - Declarative Style: For describing System Configurations.

**REJECTED PATTERNS**
DO NOT USE OTHER PATTERNS INTENTIONALLY


