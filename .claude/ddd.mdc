---
description: DDD Best Practices
globs:
alwaysApply: true
---
You are an expert in Domain-Driven Design (DDD) for event-driven architectures, particularly focused on Rust, NATS, and distributed systems.

# Domain-Driven Design Implementation Rules (CIM Project)

## **ZERO CRUD VIOLATIONS RULE**

**MANDATORY**: All domains MUST follow event-driven architecture with NO CRUD violations.

### Value Object Immutability in Event Sourcing

**Critical Principle**: Value Objects CANNOT be "updated" in Event Sourcing - they are replaced entirely.

```rust
// ❌ WRONG - Never create "update" events for value objects
pub enum EdgeEvent {
    EdgeUpdated {
        edge_id: EdgeId,
        old_relationship: EdgeRelationship,
        new_relationship: EdgeRelationship,
    }, // This violates DDD principles!
}

// ✅ CORRECT - Remove and recreate (PROVEN PATTERN)
pub enum EdgeEvent {
    EdgeRemoved { edge_id: EdgeId },
    EdgeAdded {
        edge_id: EdgeId,
        source: NodeId,
        target: NodeId,
        relationship: EdgeRelationship,
    },
}
```

**Why This Matters**:
1. **Events are immutable facts** - They record what happened, not what changed
2. **Value Objects have no lifecycle** - They exist or don't exist, no in-between
3. **Clear event semantics** - Removal and addition are distinct business events
4. **Audit trail integrity** - Shows the complete replacement, not a partial mutation

### Proven Implementation Pattern

```rust
// When changing a value object property
impl GraphAggregate {
    pub fn change_edge_relationship(
        &mut self,
        edge_id: EdgeId,
        new_relationship: EdgeRelationship,
    ) -> Result<Vec<DomainEvent>> {
        let old_edge = self.edges.get(&edge_id)
            .ok_or(DomainError::EdgeNotFound)?;

        // Generate two events: removal then addition
        let events = vec![
            DomainEvent::EdgeRemoved {
                graph_id: self.id,
                edge_id,
            },
            DomainEvent::EdgeAdded {
                graph_id: self.id,
                edge_id: EdgeId::new(), // New identity
                source: old_edge.source,
                target: old_edge.target,
                relationship: new_relationship,
            },
        ];

        // Apply both events
        for event in &events {
            self.apply_event(event)?;
        }

        Ok(events)
    }
}
```

## **CROSS-DOMAIN INTEGRATION PATTERNS**

**PROVEN**: Git→Graph domain integration generates real workflows with 103+ events.

### Cross-Domain Event Flow
```rust
// Example: Git commits → Graph nodes
GitEvent::CommitAdded { commit_id, message, author } 
    → GraphCommand::AddNode { node_id: commit_id, content: message }
    → GraphEvent::NodeAdded { node_id, position, metadata }
```

### Integration Rules
1. **No Direct Dependencies**: Domains communicate only through events
2. **Event Translation**: Use converter/adapter patterns for cross-domain data
3. **Async Coordination**: Cross-domain workflows are eventually consistent
4. **Bounded Context Integrity**: Each domain maintains its own model

## **Domain-Driven Design Naming Convention Guideline**

This document establishes strict and comprehensive naming conventions for all code, documentation, and event structures within a Domain-Driven Design (DDD) project. The goal is to enforce clarity, consistency, and alignment with the Ubiquitous Language.

---

## **1. Ubiquitous Language**

- **All names must be derived from the business domain vocabulary.**
  - Example: Use `Invoice` instead of `InvoiceEntity` or `InvoiceComponent` or `InvoiceDTO` unless "Entity" or "DTO" are explicit business terms.
- **Avoid technical terms and suffixes unless they are part of the domain language.**
  - Example: Do not use `Manager`, `Helper`, or `Processor` unless these are business terms.
- **Collaborate with domain experts to validate names and maintain a shared glossary**.
- **Names must be clear, pronounceable, and free from uninterpretable acronyms.**
- **Compound Names should be natural phrases with no whitespace and PascalCase**
- **Keep names as concise and specific as possible**.

---

## **2. Aggregates and Entities**

- **Aggregates are named as singular nouns.**
  - Example: `Order`, `User`.
- **Entities within aggregates are also named as singular nouns.**
  - Example: `OrderItem` (part of the `Order` aggregate).
- **Avoid technical suffixes unless required by the domain.**
  - Example: Use `Order`, not `OrderAggregate`, unless "Aggregate" is a business term.

---

## **3. Domain Services**

- **Domain services are named as `ServiceContext`.**
  - Example: `AuthorizeUserRegistration`, `ApproveInvoice`.
- **Application services are named as `ServiceContext`.**
  - Example: `UserRegistration` (application layer).
- **Services should NOT reflect a hierarchy.**
---

## **4. Repositories**

- **Repositories are named as `DomainContext`.**
  - Example: `Orders`, `People`, `Organizations`.
- **Avoid generic or ambiguous repository names.**
  - Example: Do not use `Data` or `GenericRepository`.

---

## **5. Value Objects**

- **Value objects are named as descriptive nouns or noun phrases.**
  - Example: `Address`, `TimeRange`.
- **Value objects must be immutable and clearly distinguish themselves from entities.**
  - Example: `Address` (value object), `User` (entity).

---

## **6. Domain Events**

- **Domain events are preceeded in Subject as `event.` so we should not repeat that pattern in the name.**
  - Example: `MoneyDeposited`, `OrderPlaced`.
- **Events must be specific to the action and subject.**
  - Example: Use `OrderShipped`, not `OrderChanged`.
- **Event payloads should be minimal, immutable, and use primitive types or simple DTOs**.
- **Event payloads may also be a CID, referring to an Object in the Object Store**.
- **Event names must be serializable and independent of domain model classes.**

---

## **7. Event-Driven Architecture (Topic/Queue Naming)**

- **Events related to collections or aggregates use plural names.**
  - Example: `payments.failed`, `users.registered`.
- **Events related to processes or single entities use singular names.**
  - Example: `transaction.authorised`, `authentication.failed`.
- **IF Including a version, so do so at the END of the topic name.**
  - Example: `domain.event.v1` or `domain.event.v0.2.1`.
- **For sub-entities or nested concepts, use plural for collections.**
  - Example: `order.items.shipped`.
- **Avoid embedding technical details or generic terms in event names.**

---

## **8. Intention-Revealing Interfaces**

- **Interfaces and classes must reveal intent through their names.**
  - Example: `CompleteInvoiceApproval`, not `InvoiceService`.
- **Avoid generic or ambiguous names.**
  - Example: Use `AutomatedInvoiceApproval`, not `InvoiceProcessor`.
- **Interfaces should be Atomic**
- **Interfaces may be Composed**
---

## **9. Bounded Contexts**

- **Concepts must be isolated within their bounded context.**
  - Example: `Candidate` in "sourcing" context vs. `Prospect` in "interview" context.
- **Use context-specific names to avoid ambiguity.**
  - Example: `Prospect`, `Candidate`, `Employee` for different stages.

---

## **10. Naming Process and Documentation**

- **All naming conventions must be documented in a shared glossary.**
- **Names must be reviewed and validated by both developers and domain experts**.
- **Use collaborative modeling techniques (e.g., Event Storming) to refine names iteratively**.
- **REFACTOR NAMES AS THE DOMAIN UNDERSTANDING EVOLVES.**

---

## **11. Enforcement and Tools**

- **Use linters, style guides, or static analysis tools to enforce naming conventions.**
- **DOCUMENT EXCEPTIONS AND RATIONALE FOR ANY DEVIATION FROM THE STANDARD.**
- **Regularly audit code and documentation for compliance.**

---

This guideline ensures that naming within your project is Domain-Driven Design consistent, domain-aligned, and maintainable.

**ADHERE STRICTLY TO THESE RULES TO MINIMIZE AMBIGUITY AND MAXIMIZE CLARITY**.

## **DOMAIN COMPLETION REQUIREMENTS**

For a domain to be considered "complete" it must have:

1. **Event-Driven Architecture**: Zero CRUD violations, all operations through events
2. **Comprehensive Tests**: All handlers, aggregates, and queries tested
3. **CQRS Implementation**: Clear command/query separation with projections  
4. **Cross-Domain Integration**: Proven integration patterns with other domains
5. **Documentation**: Complete API documentation and usage examples

**Current Completion Status**:
- ✅ Graph Domain: 41/41 tests, full CQRS, 9/18 queries implemented
- ✅ Identity Domain: 54/54 tests, complete person/organization management
- ✅ Person Domain: 2/2 tests, event-driven contact management  
- ✅ Agent Domain: 7/7 tests, AI agent foundation
- ✅ Git Domain: Working cross-domain integration example
- 🔄 ConceptualSpaces Domain: 50% complete
- 🔄 Workflow Domain: 30% complete  
- 🔄 Location Domain: 40% complete

## **REMAINING WORK PRIORITIZATION**

1. **ConceptualSpaces Domain** - Critical for AI reasoning capabilities
2. **Workflow Domain** - Core to CIM vision of graph-based workflows
3. **Location Domain** - Supporting domain for geographic concepts

**Next milestone**: Complete ConceptualSpaces domain to reach 75% completion (6/8 domains).
